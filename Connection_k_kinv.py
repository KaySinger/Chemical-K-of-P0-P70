import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# 数据：反应速率常数 k 和聚合物浓度 P
k = [1.0, 1.0, 2.0, 1.3953526521420616, 0.9931706075828184, 0.7211898803461566, 0.5342706039317006, 0.4037930359893108, 0.3113452607359945, 0.24491285650596362,
     0.1965471712087229, 0.1609192134990648, 0.13441102547949946, 0.11453752053093468, 0.09957413673572783, 0.08831433683938571, 0.07991011652130779,
     0.07376633480247997, 0.0694705178894771, 0.06674653992065213, 0.06542486987803957, 0.06542486987803957, 0.06674653992065213, 0.06947051788947708,
     0.07376633480247996, 0.07991011652130778, 0.0883143368393857, 0.09957413673572782, 0.11453752053093466, 0.13441102547949943, 0.16091921349906477,
     0.19654717120872287, 0.2449128565059636, 0.31134526073599444, 0.40379303598931077, 0.5342706039317004, 0.7211898803461565, 0.9931706075828183,
     1.3953526521420614, 1.9999999999999998]
k_inv = [1e-08, 0.12611416853508353, 0.10639808686735666, 0.09066646888190542, 0.07803735296095027, 0.06784241546532552, 0.05957211504271675, 0.05283572628985108,
          0.047332047173632784, 0.04282780735494614, 0.039141668738473745, 0.036132314237335886, 0.033689546493791675, 0.031727620040390585, 0.03018024575179806,
          0.02899686138934934, 0.028139874622219258, 0.02758266777171775, 0.02730821564174769, 0.02730821564174769, 0.02758266777171775, 0.028139874622219258,
          0.02899686138934934, 0.03018024575179806, 0.031727620040390585, 0.03368954649379168, 0.036132314237335886, 0.03914166873847374, 0.04282780735494613,
          0.04733204717363278, 0.05283572628985107, 0.05957211504271674, 0.0678424154653255, 0.07803735296095025, 0.09066646888190541, 0.10639808686735665,
          0.1261141685350835, 0.15098607230587227, 0.18257984718772466]
p = [0.062429655795787034, 0.07549303615293615, 0.09038157367707772, 0.10712971774940927, 0.12571788838521603, 0.14606334764943632, 0.16801284177452094,
     0.1913377929758532, 0.2157327591684209, 0.24081774813929327, 0.2661447718000128, 0.29120876504616566, 0.3154626891681067, 0.3383363150132504, 0.3592578643045527,
     0.37767740888915596, 0.39309071634089765, 0.40506211090851374, 0.4132449083429321, 0.41739808871846035, 0.41739808871846035, 0.4132449083429321,
     0.40506211090851374, 0.39309071634089765, 0.37767740888915596, 0.3592578643045527, 0.3383363150132504, 0.3154626891681067, 0.29120876504616566,
     0.2661447718000128, 0.24081774813929327, 0.2157327591684209, 0.1913377929758532, 0.16801284177452094, 0.14606334764943632, 0.12571788838521603,
     0.10712971774940927, 0.09038157367707772, 0.07549303615293615, 0.062429655795787034]

for i in range(40):
   p[i] = p[i] * 10

# 假设的模型：k = a * P^b
def model(P, a, x):
    return a * P**x

# 使用 curve_fit 进行拟合
popt, pcov = curve_fit(model, p[1: 39], k[2:], maxfev= 1000)

# 拟合得到的参数
a, x = popt
print(f"正向系数拟合参数: a = {a}, x = {x}")

# 使用拟合参数绘制拟合曲线
P_fit = np.linspace(min(p[1: 39]), max(p[1: 39]), 100)
k_fit = model(P_fit, *popt)

# 绘制原始数据和拟合曲线
plt.scatter(p[1: 39], k[2:], label='Natural data')
plt.plot(P_fit, k_fit, color='red', label=f'curve_fitting : k = {a:.2f} * P^{x:.2f}')
plt.xlabel('Concentration P')
plt.ylabel('k')
plt.legend()
plt.title('k vs P Curve_fitting')
plt.show()
#
# popt_inv, pcov_inv = curve_fit(model, p[2: 40], k_inv[1:])
#
# # 拟合得到的参数
# b, m = popt_inv
# print(f"逆向系数拟合参数: b = {b}, m = {m}")
#
# # 使用拟合参数绘制拟合曲线
# P_inv_fit = np.linspace(min(p[2: 40]), max(p[2: 40]), 100)
# k_inv_fit = model(P_inv_fit, *popt_inv)
#
# # 绘制原始数据和拟合曲线
# plt.scatter(p[2: 40], k_inv[1:], label='Natural data')
# plt.plot(P_inv_fit, k_inv_fit, color='red', label=f'curve_fitting : k_inv = {b:.2f} * P^{m:.2f}')
# plt.xlabel('Concentration P')
# plt.ylabel('k_inv')
# plt.legend()
# plt.title('k_inv vs P Curve_fitting')
# plt.show()